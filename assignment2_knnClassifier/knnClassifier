from numpy.random import random_integers
from sklearn import datasets
from sklearn.utils import shuffle
import csv
import random
import math
import operator


def checkFileName(filename):
    """
    this big ugly function checks the filename and reclassifies each entry of the data if it is the cars.csv so that
    the loadDataset function will work accordingly.
    :param filename: the name of the file we're checking.
    :return: a complete dataset
    """
    f = open(filename)
    lines = csv.reader(f)
    dataset = list(lines)
    f.close()
    if filename == 'cars.csv':
        for row in range(len(dataset)):
            for col in range(len(dataset[row]) - 1):
                if col == 0:
                    if dataset[row][col] == 'vhigh':
                        dataset[row][col] = 1.0
                    elif dataset[row][col] == 'high':
                        dataset[row][col] = 1.1
                    elif dataset[row][col] == 'med':
                        dataset[row][col] = 1.2
                    elif dataset[row][col] == 'low':
                        dataset[row][col] = 1.3
                elif col == 1:
                    if dataset[row][col] == 'vhigh':
                        dataset[row][col] = 2.0
                    elif dataset[row][col] == 'high':
                        dataset[row][col] = 2.1
                    elif dataset[row][col] == 'med':
                        dataset[row][col] = 2.2
                    elif dataset[row][col] == 'low':
                        dataset[row][col] = 2.3
                elif col == 2:
                    if dataset[row][col] == '2':
                        dataset[row][col] = 3.0
                    elif dataset[row][col] == '3':
                        dataset[row][col] = 3.1
                    elif dataset[row][col] == '4':
                        dataset[row][col] = 3.2
                    elif dataset[row][col] == '5more':
                        dataset[row][col] = 3.3
                elif col == 3:
                    if dataset[row][col] == '2':
                        dataset[row][col] = 4.0
                    elif dataset[row][col] == '4':
                        dataset[row][col] = 4.1
                    elif dataset[row][col] == 'more':
                        dataset[row][col] = 4.2
                elif col == 4:
                    if dataset[row][col] == 'small':
                        dataset[row][col] = 5.0
                    elif dataset[row][col] == 'med':
                        dataset[row][col] = 5.1
                    elif dataset[row][col] == 'big':
                        dataset[row][col] = 5.2
                elif col == 5:
                    if dataset[row][col] == 'low':
                        dataset[row][col] = 6.0
                    elif dataset[row][col] == 'med':
                        dataset[row][col] = 6.1
                    elif dataset[row][col] == 'high':
                        dataset[row][col] = 6.2
                elif col == 6:
                    if dataset[row][col] == 'unacc':
                        dataset[row][col] = 7.0
                    elif dataset[row][col] == 'acc':
                        dataset[row][col] = 7.1
                    elif dataset[row][col] == 'good':
                        dataset[row][col] = 7.2
                    elif dataset[row][col] == 'vgood':
                        dataset[row][col] = 7.3
    return dataset


class KnnClassifier:
    def __init__(self):
        pass

    def loadDataset(self, filename, split, trainingSet=[], testSet=[]):
        dataset = checkFileName(filename)  # check if it's cars.csv
        for x in range(len(dataset)):
            for y in range(len(dataset[x]) - 1):  # -1 is all but last?
                dataset[x][y] = float(dataset[x][y])
            if random.random() < split:
                trainingSet.append(dataset[x])
            else:
                testSet.append(dataset[x])

    def euclideanDistance(self, instance1, instance2, length):
        distance = 0
        for x in range(length):
            distance += pow((instance1[x] - instance2[x]), 2)
        return math.sqrt(distance)

    def getNeighbors(self, trainingSet, testInstance, k):
        distances = []
        length = len(testInstance) - 1
        for x in range(len(trainingSet)):
            dist = self.euclideanDistance(testInstance, trainingSet[x], length)
            distances.append((trainingSet[x], dist))
        distances.sort(key=operator.itemgetter(1))
        neighbors = []
        for x in range(k):
            neighbors.append(distances[x][0])
        return neighbors

    def getResponse(self, neighbors):
        classVotes = {}
        for x in range(len(neighbors)):
            response = neighbors[x][-1]
            if response in classVotes:
                classVotes[response] += 1
            else:
                classVotes[response] = 1
        sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1), reverse=True)
        return sortedVotes[0][0]

    def getAccuracy(self, testSet, predictions):
        correct = 0
        for x in range(len(testSet)):
            if testSet[x][-1] == predictions[x]:
                correct += 1
        return (correct / float(len(testSet))) * 100.0


def main(filename):
    # get your data ready
    trainingSet=[]
    testSet=[]
    split = 0.70
    tester = KnnClassifier()
    tester.loadDataset(filename, split, trainingSet, testSet)
    print('Train set: ' + repr(len(trainingSet)))
    print('Test set: ' + repr(len(testSet)))

    #create some predictions
    predictions = []
    k = 3
    for i in range(len(testSet)):
        neighbors = tester.getNeighbors(trainingSet, testSet[i], k)
        result = tester.getResponse(neighbors)
        predictions.append(result)
        print('predicted: ' + repr(result) + ', actual: ' + repr(testSet[i][-1]))
    accuracy = tester.getAccuracy(testSet, predictions)
    print('Accuracy = ' + repr(accuracy) + '%')

main('iris.csv')
main('cars.csv')
